/// <reference path="../../app.d.ts" />
'use strict';
var RabbitMQ_TestApp;
(function (RabbitMQ_TestApp) {
    var Services;
    (function (Services) {
        var Auth;
        (function (Auth) {
            var AuthService = (function () {
                function AuthService($localStorage, $q, $http, $window, $state, CONFIG) {
                    var _this = this;
                    this.$localStorage = $localStorage;
                    this.$q = $q;
                    this.$http = $http;
                    this.$window = $window;
                    this.$state = $state;
                    this.CONFIG = CONFIG;
                    this._ready = $q.defer();
                    if ($localStorage.token) {
                        $http.get(CONFIG.API_SERVER + '/api/users/me')
                            .then(function (res) { return _this._user = res.data; })
                            .finally(function () { return _this._ready.resolve(true); });
                    }
                    else
                        this._ready.resolve(true);
                }
                AuthService.prototype.ready = function () {
                    return this._ready.promise;
                };
                AuthService.prototype.signup = function (user) {
                    var _this = this;
                    var deferred = this.$q.defer();
                    this.$http.post(this.CONFIG.API_SERVER + '/api/users', user)
                        .then(function (res) {
                        _this._user = res.data.user;
                        _this.$localStorage.token = res.data.token;
                        deferred.resolve();
                    })
                        .catch(function (err) { return deferred.reject(err.data); });
                    return deferred.promise;
                };
                AuthService.prototype.login = function (user) {
                    var _this = this;
                    var deferred = this.$q.defer();
                    this.$http.post(this.CONFIG.API_SERVER + '/auth/local', user)
                        .then(function (res) {
                        _this._user = res.data.user;
                        _this.$localStorage.token = res.data.token;
                        deferred.resolve();
                    })
                        .catch(function (err) { return deferred.reject(err.data); });
                    return deferred.promise;
                };
                AuthService.prototype.facebookLogin = function () {
                    var _this = this;
                    var deferred = this.$q.defer();
                    var url = this.CONFIG.API_SERVER + '/auth/facebook', width = 1000, height = 650, top = (window.outerHeight - height) / 2, left = (window.outerWidth - width) / 2, popup = this.$window.open(url, 'facebook_login', 'width=' + width + ',height=' + height + ',scrollbars=0,top=' + top + ',left=' + left + ',titlebar=no,toolbar=no,location=no,directories=no,menubar=no');
                    window.addEventListener('message', function (e) {
                        var message = e.data;
                        if (message.status === 'success') {
                            popup.close();
                            _this._user = message.user;
                            _this.$localStorage.token = message.token;
                            _this.$state.reload();
                            deferred.resolve();
                        }
                        else if (message.status === 'fail') {
                            popup.close();
                            delete _this._user;
                            delete _this.$localStorage.token;
                            _this.$state.reload();
                            deferred.reject();
                        }
                    });
                    return deferred.promise;
                };
                AuthService.prototype.logout = function () {
                    delete this.$localStorage.token;
                    delete this._user;
                };
                AuthService.prototype.isLogged = function () {
                    return typeof this._user !== 'undefined';
                };
                AuthService.prototype.getUser = function () {
                    return this._user;
                };
                AuthService.$inject = ['$localStorage', '$q', '$http', '$window', '$state', 'CONFIG'];
                return AuthService;
            })();
            angular.module('rabbitMqTest').service('Auth', AuthService);
        })(Auth = Services.Auth || (Services.Auth = {}));
    })(Services = RabbitMQ_TestApp.Services || (RabbitMQ_TestApp.Services = {}));
})(RabbitMQ_TestApp || (RabbitMQ_TestApp = {}));

//# sourceMappingURL=data:application/json;base64,
