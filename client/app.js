/// <reference path="app.d.ts" />
'use strict';
var RabbitMQ_TestApp;
(function (RabbitMQ_TestApp) {
    angular.module('rabbitMqTest', [
        'ui.router',
        'ngStorage',
        'ngResource',
        'ngSanitize',
        'ngAnimate',
        'btford.socket-io'
    ])
        .constant('CONFIG', {
        'API_SERVER': 'http://localhost:9000',
        'IS_DESKTOP_APP': (typeof isDesktopApp !== 'undefined' ? isDesktopApp : false)
    })
        .config(function ($stateProvider, $urlRouterProvider, $locationProvider, $httpProvider, CONFIG) {
        $urlRouterProvider.otherwise('/login');
        if (!CONFIG.IS_DESKTOP_APP)
            $locationProvider.html5Mode(true);
        $httpProvider.interceptors.push('authInterceptor');
    })
        .factory('authInterceptor', function ($q, $localStorage, $location) {
        return {
            request: function (config) {
                config.headers = config.headers || {};
                if ($localStorage.token) {
                    config.headers.Authorization = 'Bearer ' + $localStorage.token;
                }
                return config;
            },
            responseError: function (response) {
                if (response.status === 401) {
                    $location.path('/login');
                    delete $localStorage.token;
                    return $q.reject(response);
                }
                else {
                    return $q.reject(response);
                }
            }
        };
    });
})(RabbitMQ_TestApp || (RabbitMQ_TestApp = {}));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNsaWVudC9hcHAudHMiXSwibmFtZXMiOlsiUmFiYml0TVFfVGVzdEFwcCJdLCJtYXBwaW5ncyI6IkFBQUEsaUNBQWlDO0FBQ2pDLFlBQVksQ0FBQztBQUViLElBQU8sZ0JBQWdCLENBMER0QjtBQTFERCxXQUFPLGdCQUFnQixFQUFDLENBQUM7SUFFckJBLE9BQU9BLENBQUNBLE1BQU1BLENBQUNBLGNBQWNBLEVBQUVBO1FBQzNCQSxXQUFXQTtRQUNYQSxXQUFXQTtRQUNYQSxZQUFZQTtRQUNaQSxZQUFZQTtRQUNaQSxXQUFXQTtRQUNYQSxrQkFBa0JBO0tBQ3JCQSxDQUFDQTtTQUVHQSxRQUFRQSxDQUFDQSxRQUFRQSxFQUFFQTtRQUNoQkEsWUFBWUEsRUFBRUEsdUJBQXVCQTtRQUNyQ0EsZ0JBQWdCQSxFQUFFQSxDQUFDQSxPQUFPQSxZQUFZQSxLQUFLQSxXQUFXQSxHQUFHQSxZQUFZQSxHQUFHQSxLQUFLQSxDQUFDQTtLQUNqRkEsQ0FBQ0E7U0FFREEsTUFBTUEsQ0FBQ0EsVUFDSkEsY0FBb0NBLEVBQ3BDQSxrQkFBNENBLEVBQzVDQSxpQkFBdUNBLEVBQ3ZDQSxhQUErQkEsRUFDL0JBLE1BQWtCQTtRQUVsQixrQkFBa0IsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdkMsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDO1lBQ3ZCLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN0QyxhQUFhLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ3ZELENBQUMsQ0FBQ0E7U0FFREEsT0FBT0EsQ0FBQ0EsaUJBQWlCQSxFQUFFQSxVQUN4QkEsRUFBZ0JBLEVBQ2hCQSxhQUFhQSxFQUNiQSxTQUE4QkE7UUFFOUIsTUFBTSxDQUFDO1lBRUgsT0FBTyxFQUFFLFVBQVMsTUFBTTtnQkFDcEIsTUFBTSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQztnQkFDdEMsRUFBRSxDQUFDLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7b0JBQ3RCLE1BQU0sQ0FBQyxPQUFPLENBQUMsYUFBYSxHQUFHLFNBQVMsR0FBRyxhQUFhLENBQUMsS0FBSyxDQUFDO2dCQUNuRSxDQUFDO2dCQUVELE1BQU0sQ0FBQyxNQUFNLENBQUM7WUFDbEIsQ0FBQztZQUVELGFBQWEsRUFBRSxVQUFTLFFBQVE7Z0JBQzVCLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztvQkFDMUIsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztvQkFDekIsT0FBTyxhQUFhLENBQUMsS0FBSyxDQUFDO29CQUMzQixNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDL0IsQ0FBQztnQkFDRCxJQUFJLENBQUMsQ0FBQztvQkFDRixNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDL0IsQ0FBQztZQUNMLENBQUM7U0FDSixDQUFDO0lBQ04sQ0FBQyxDQUFDQSxDQUFDQTtBQUVYQSxDQUFDQSxFQTFETSxnQkFBZ0IsS0FBaEIsZ0JBQWdCLFFBMER0QiIsImZpbGUiOiJjbGllbnQvYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cImFwcC5kLnRzXCIgLz5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlIFJhYmJpdE1RX1Rlc3RBcHAge1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ3JhYmJpdE1xVGVzdCcsIFtcbiAgICAgICAgJ3VpLnJvdXRlcicsXG4gICAgICAgICduZ1N0b3JhZ2UnLFxuICAgICAgICAnbmdSZXNvdXJjZScsXG4gICAgICAgICduZ1Nhbml0aXplJyxcbiAgICAgICAgJ25nQW5pbWF0ZScsXG4gICAgICAgICdidGZvcmQuc29ja2V0LWlvJ1xuICAgIF0pXG5cbiAgICAgICAgLmNvbnN0YW50KCdDT05GSUcnLCB7XG4gICAgICAgICAgICAnQVBJX1NFUlZFUic6ICdodHRwOi8vbG9jYWxob3N0OjkwMDAnLFxuICAgICAgICAgICAgJ0lTX0RFU0tUT1BfQVBQJzogKHR5cGVvZiBpc0Rlc2t0b3BBcHAgIT09ICd1bmRlZmluZWQnID8gaXNEZXNrdG9wQXBwIDogZmFsc2UpXG4gICAgICAgIH0pXG5cbiAgICAgICAgLmNvbmZpZyhmdW5jdGlvbihcbiAgICAgICAgICAgICRzdGF0ZVByb3ZpZGVyOiBuZy51aS5JU3RhdGVQcm92aWRlcixcbiAgICAgICAgICAgICR1cmxSb3V0ZXJQcm92aWRlcjogbmcudWkuSVVybFJvdXRlclByb3ZpZGVyLFxuICAgICAgICAgICAgJGxvY2F0aW9uUHJvdmlkZXI6IG5nLklMb2NhdGlvblByb3ZpZGVyLFxuICAgICAgICAgICAgJGh0dHBQcm92aWRlcjogbmcuSUh0dHBQcm92aWRlciAsXG4gICAgICAgICAgICBDT05GSUc6IElBcHBDb25maWcpIHtcblxuICAgICAgICAgICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnL2xvZ2luJyk7XG4gICAgICAgICAgICBpZiAoIUNPTkZJRy5JU19ERVNLVE9QX0FQUClcbiAgICAgICAgICAgICAgICAkbG9jYXRpb25Qcm92aWRlci5odG1sNU1vZGUodHJ1ZSk7XG4gICAgICAgICAgICAkaHR0cFByb3ZpZGVyLmludGVyY2VwdG9ycy5wdXNoKCdhdXRoSW50ZXJjZXB0b3InKTtcbiAgICAgICAgfSlcblxuICAgICAgICAuZmFjdG9yeSgnYXV0aEludGVyY2VwdG9yJywgZnVuY3Rpb24oXG4gICAgICAgICAgICAkcTogbmcuSVFTZXJ2aWNlLFxuICAgICAgICAgICAgJGxvY2FsU3RvcmFnZSxcbiAgICAgICAgICAgICRsb2NhdGlvbjogbmcuSUxvY2F0aW9uU2VydmljZSkge1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuXG4gICAgICAgICAgICAgICAgcmVxdWVzdDogZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5oZWFkZXJzID0gY29uZmlnLmhlYWRlcnMgfHwge307XG4gICAgICAgICAgICAgICAgICAgIGlmICgkbG9jYWxTdG9yYWdlLnRva2VuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maWcuaGVhZGVycy5BdXRob3JpemF0aW9uID0gJ0JlYXJlciAnICsgJGxvY2FsU3RvcmFnZS50b2tlbjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb25maWc7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIHJlc3BvbnNlRXJyb3I6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy9sb2dpbicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlICRsb2NhbFN0b3JhZ2UudG9rZW47XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHEucmVqZWN0KHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG5cbn1cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
