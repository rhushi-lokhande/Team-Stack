/// <reference path="../../server.d.ts" />
'use strict';
var crypto = require('crypto'), mongoose = require('mongoose'), Schema = mongoose.Schema;
var UserSchema = new Schema({
    email: String,
    passwordHash: String,
    salt: String,
    name: String,
    username: String,
    user_image: String,
    facebook_id: String,
    facebook: {},
    createdAt: { type: Date, 'default': Date.now }
});
/**
 * Virtuals
 */
UserSchema
    .virtual('password')
    .set(function (password) {
    this._password = password;
    this.salt = this.makeSalt();
    this.passwordHash = this.encryptPassword(password);
})
    .get(function () {
    return this._password;
});
/**
 * Validations
 */
UserSchema
    .path('email')
    .validate(function (value, respond) {
    var self = this;
    this.constructor.findOne({ email: value }, function (err, user) {
        if (err) {
            throw err;
        }
        if (user) {
            if (self.id === user.id) {
                return respond(true);
            }
            return respond(false);
        }
        respond(true);
    });
}, 'email already used');
/**
 * Methods
 */
UserSchema.methods = {
    /**
     * Authenticate
     *
     * @param {String} password
     * @return {Boolean}
     */
    authenticate: function (password) {
        return this.encryptPassword(password) === this.passwordHash;
    },
    /**
     * Make salt
     *
     * @return {String}
     */
    makeSalt: function () {
        return crypto.randomBytes(16).toString('base64');
    },
    /**
     * Encrypt password
     *
     * @param {String} password
     * @return {String}
     */
    encryptPassword: function (password) {
        if (!password || !this.salt) {
            return '';
        }
        var salt = new Buffer(this.salt, 'base64');
        return crypto.pbkdf2Sync(password, salt, 10000, 64).toString('base64');
    }
};
module.exports = mongoose.model('User', UserSchema);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS91c2VyL3VzZXIubW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMENBQTBDO0FBQzFDLFlBQVksQ0FBQztBQUViLElBQUksTUFBTSxHQUFLLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFDNUIsUUFBUSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFDOUIsTUFBTSxHQUFLLFFBQVEsQ0FBQyxNQUFNLENBQUM7QUFFL0IsSUFBSSxVQUFVLEdBQUcsSUFBSSxNQUFNLENBQUM7SUFDeEIsS0FBSyxFQUFFLE1BQU07SUFDYixZQUFZLEVBQUUsTUFBTTtJQUNwQixJQUFJLEVBQUUsTUFBTTtJQUNaLElBQUksRUFBRSxNQUFNO0lBQ1osUUFBUSxFQUFFLE1BQU07SUFDaEIsVUFBVSxFQUFFLE1BQU07SUFDbEIsV0FBVyxFQUFFLE1BQU07SUFDbkIsUUFBUSxFQUFFLEVBQUc7SUFDYixTQUFTLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFO0NBQ2pELENBQUMsQ0FBQztBQUVIOztHQUVHO0FBRUgsVUFBVTtLQUNMLE9BQU8sQ0FBQyxVQUFVLENBQUM7S0FDbkIsR0FBRyxDQUFDLFVBQVUsUUFBUTtJQUNuQixJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztJQUMxQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUM1QixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDdkQsQ0FBQyxDQUFDO0tBQ0QsR0FBRyxDQUFDO0lBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7QUFDMUIsQ0FBQyxDQUFDLENBQUM7QUFFUDs7R0FFRztBQUVILFVBQVU7S0FDTCxJQUFJLENBQUMsT0FBTyxDQUFDO0tBQ2IsUUFBUSxDQUFDLFVBQVUsS0FBSyxFQUFFLE9BQU87SUFDOUIsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBQ2hCLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFLFVBQVUsR0FBRyxFQUFFLElBQUk7UUFDMUQsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUFDLE1BQU0sR0FBRyxDQUFDO1FBQUMsQ0FBQztRQUN2QixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ1AsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFBQyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQUMsQ0FBQztZQUNsRCxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzFCLENBQUM7UUFDRCxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbEIsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLEVBQUUsb0JBQW9CLENBQUMsQ0FBQztBQUU3Qjs7R0FFRztBQUVILFVBQVUsQ0FBQyxPQUFPLEdBQUc7SUFFakI7Ozs7O09BS0c7SUFDSCxZQUFZLEVBQUUsVUFBVSxRQUFRO1FBQzVCLE1BQU0sQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxLQUFLLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDaEUsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxRQUFRLEVBQUU7UUFDTixNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsZUFBZSxFQUFFLFVBQVUsUUFBUTtRQUMvQixFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztRQUFDLENBQUM7UUFDM0MsSUFBSSxJQUFJLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztRQUMzQyxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDM0UsQ0FBQztDQUVKLENBQUM7QUFFRixNQUFNLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDIiwiZmlsZSI6ImFwaS91c2VyL3VzZXIubW9kZWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vc2VydmVyLmQudHNcIiAvPlxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3J5cHRvICAgPSByZXF1aXJlKCdjcnlwdG8nKSxcbiAgICBtb25nb29zZSA9IHJlcXVpcmUoJ21vbmdvb3NlJyksXG4gICAgU2NoZW1hICAgPSBtb25nb29zZS5TY2hlbWE7XG5cbnZhciBVc2VyU2NoZW1hID0gbmV3IFNjaGVtYSh7XG4gICAgZW1haWw6IFN0cmluZyxcbiAgICBwYXNzd29yZEhhc2g6IFN0cmluZyxcbiAgICBzYWx0OiBTdHJpbmcsXG4gICAgbmFtZTogU3RyaW5nLFxuICAgIHVzZXJuYW1lOiBTdHJpbmcsXG4gICAgdXNlcl9pbWFnZTogU3RyaW5nLFxuICAgIGZhY2Vib29rX2lkOiBTdHJpbmcsXG4gICAgZmFjZWJvb2s6IHsgfSxcbiAgICBjcmVhdGVkQXQ6IHsgdHlwZTogRGF0ZSwgJ2RlZmF1bHQnOiBEYXRlLm5vdyB9XG59KTtcblxuLyoqXG4gKiBWaXJ0dWFsc1xuICovXG5cblVzZXJTY2hlbWFcbiAgICAudmlydHVhbCgncGFzc3dvcmQnKVxuICAgIC5zZXQoZnVuY3Rpb24gKHBhc3N3b3JkKSB7XG4gICAgICAgIHRoaXMuX3Bhc3N3b3JkID0gcGFzc3dvcmQ7XG4gICAgICAgIHRoaXMuc2FsdCA9IHRoaXMubWFrZVNhbHQoKTtcbiAgICAgICAgdGhpcy5wYXNzd29yZEhhc2ggPSB0aGlzLmVuY3J5cHRQYXNzd29yZChwYXNzd29yZCk7XG4gICAgfSlcbiAgICAuZ2V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Bhc3N3b3JkO1xuICAgIH0pO1xuXG4vKipcbiAqIFZhbGlkYXRpb25zXG4gKi9cblxuVXNlclNjaGVtYVxuICAgIC5wYXRoKCdlbWFpbCcpXG4gICAgLnZhbGlkYXRlKGZ1bmN0aW9uICh2YWx1ZSwgcmVzcG9uZCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHRoaXMuY29uc3RydWN0b3IuZmluZE9uZSh7IGVtYWlsOiB2YWx1ZSB9LCBmdW5jdGlvbiAoZXJyLCB1c2VyKSB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7IHRocm93IGVycjsgfVxuICAgICAgICAgICAgaWYgKHVzZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5pZCA9PT0gdXNlci5pZCkgeyByZXR1cm4gcmVzcG9uZCh0cnVlKTsgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25kKGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3BvbmQodHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgIH0sICdlbWFpbCBhbHJlYWR5IHVzZWQnKTtcblxuLyoqXG4gKiBNZXRob2RzXG4gKi9cblxuVXNlclNjaGVtYS5tZXRob2RzID0ge1xuXG4gICAgLyoqXG4gICAgICogQXV0aGVudGljYXRlXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcGFzc3dvcmRcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIGF1dGhlbnRpY2F0ZTogZnVuY3Rpb24gKHBhc3N3b3JkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVuY3J5cHRQYXNzd29yZChwYXNzd29yZCkgPT09IHRoaXMucGFzc3dvcmRIYXNoO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBNYWtlIHNhbHRcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBtYWtlU2FsdDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gY3J5cHRvLnJhbmRvbUJ5dGVzKDE2KS50b1N0cmluZygnYmFzZTY0Jyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEVuY3J5cHQgcGFzc3dvcmRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwYXNzd29yZFxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBlbmNyeXB0UGFzc3dvcmQ6IGZ1bmN0aW9uIChwYXNzd29yZCkge1xuICAgICAgICBpZiAoIXBhc3N3b3JkIHx8ICF0aGlzLnNhbHQpIHsgcmV0dXJuICcnOyB9XG4gICAgICAgIHZhciBzYWx0ID0gbmV3IEJ1ZmZlcih0aGlzLnNhbHQsICdiYXNlNjQnKTtcbiAgICAgICAgcmV0dXJuIGNyeXB0by5wYmtkZjJTeW5jKHBhc3N3b3JkLCBzYWx0LCAxMDAwMCwgNjQpLnRvU3RyaW5nKCdiYXNlNjQnKTtcbiAgICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbW9uZ29vc2UubW9kZWwoJ1VzZXInLCBVc2VyU2NoZW1hKTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
