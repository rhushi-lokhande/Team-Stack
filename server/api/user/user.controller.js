/// <reference path="../../server.d.ts" />
'use strict';
var config = require('../../config/environment'), jwt = require('jsonwebtoken'), User = require('./user.model');
function handleError(res, err) {
    return res.status(500).send(err);
}
/**
 * @api {post} /users Create a new user
 * @apiVersion 0.1.0
 * @apiName CreateUser
 * @apiDescription Create a new user in the database.
 * @apiGroup User
 *
 * @apiParam {String} email user's email.
 *
 */
exports.create = function (req, res) {
    User.create(req.body, function (err, user) {
        if (err) {
            return handleError(res, err);
        }
        var token = jwt.sign({ _id: user._id }, config.secrets.session, { expiresInMinutes: 60 * 5 });
        res.status(201).json({ token: token, user: user });
    });
};
/**
 * @api {get} /users/me Get the logged user
 * @apiVersion 0.1.0
 * @apiName GetMe
 * @apiDescription Return the user matching the authenticated user.
 * @apiGroup User
 *
 */
exports.getMe = function (req, res) {
    var userId = req.user._id;
    User.findOne({
        _id: userId
    }, '-salt -passwordHash', function (err, user) {
        if (err) {
            return handleError(res, err);
        }
        if (!user) {
            return res.json(401);
        }
        res.status(200).json(user);
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS91c2VyL3VzZXIuY29udHJvbGxlci50cyJdLCJuYW1lcyI6WyJoYW5kbGVFcnJvciJdLCJtYXBwaW5ncyI6IkFBQUEsMENBQTBDO0FBQzFDLFlBQVksQ0FBQztBQUViLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQyxFQUM1QyxHQUFHLEdBQU0sT0FBTyxDQUFDLGNBQWMsQ0FBQyxFQUNoQyxJQUFJLEdBQUssT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBRXJDLHFCQUFzQixHQUFHLEVBQUUsR0FBRztJQUMxQkEsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7QUFDckNBLENBQUNBO0FBRUQ7Ozs7Ozs7OztHQVNHO0FBQ0gsT0FBTyxDQUFDLE1BQU0sR0FBRyxVQUFVLEdBQUcsRUFBRSxHQUFHO0lBQy9CLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxVQUFVLEdBQUcsRUFBRSxJQUFJO1FBQ3JDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUFDLENBQUM7UUFDMUMsSUFBSSxLQUFLLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FDaEIsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUNqQixNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFDdEIsRUFBRSxnQkFBZ0IsRUFBRSxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQy9CLENBQUM7UUFDRixHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDdkQsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUM7QUFFRjs7Ozs7OztHQU9HO0FBQ0gsT0FBTyxDQUFDLEtBQUssR0FBRyxVQUFVLEdBQUcsRUFBRSxHQUFHO0lBQzlCLElBQUksTUFBTSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO0lBQzFCLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDVCxHQUFHLEVBQUUsTUFBTTtLQUNkLEVBQUUscUJBQXFCLEVBQUUsVUFBVSxHQUFHLEVBQUUsSUFBSTtRQUN6QyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFBQyxDQUFDO1FBQzFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQUMsQ0FBQztRQUNwQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMvQixDQUFDLENBQUMsQ0FBQztBQUNQLENBQUMsQ0FBQyIsImZpbGUiOiJhcGkvdXNlci91c2VyLmNvbnRyb2xsZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vc2VydmVyLmQudHNcIiAvPlxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgY29uZmlnID0gcmVxdWlyZSgnLi4vLi4vY29uZmlnL2Vudmlyb25tZW50JyksXG4gICAgand0ICAgID0gcmVxdWlyZSgnanNvbndlYnRva2VuJyksXG4gICAgVXNlciAgID0gcmVxdWlyZSgnLi91c2VyLm1vZGVsJyk7XG5cbmZ1bmN0aW9uIGhhbmRsZUVycm9yIChyZXMsIGVycikge1xuICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuc2VuZChlcnIpO1xufVxuXG4vKipcbiAqIEBhcGkge3Bvc3R9IC91c2VycyBDcmVhdGUgYSBuZXcgdXNlclxuICogQGFwaVZlcnNpb24gMC4xLjBcbiAqIEBhcGlOYW1lIENyZWF0ZVVzZXJcbiAqIEBhcGlEZXNjcmlwdGlvbiBDcmVhdGUgYSBuZXcgdXNlciBpbiB0aGUgZGF0YWJhc2UuXG4gKiBAYXBpR3JvdXAgVXNlclxuICpcbiAqIEBhcGlQYXJhbSB7U3RyaW5nfSBlbWFpbCB1c2VyJ3MgZW1haWwuXG4gKlxuICovXG5leHBvcnRzLmNyZWF0ZSA9IGZ1bmN0aW9uIChyZXEsIHJlcykge1xuICAgIFVzZXIuY3JlYXRlKHJlcS5ib2R5LCBmdW5jdGlvbiAoZXJyLCB1c2VyKSB7XG4gICAgICAgIGlmIChlcnIpIHsgcmV0dXJuIGhhbmRsZUVycm9yKHJlcywgZXJyKTsgfVxuICAgICAgICB2YXIgdG9rZW4gPSBqd3Quc2lnbihcbiAgICAgICAgICAgIHsgX2lkOiB1c2VyLl9pZCB9LFxuICAgICAgICAgICAgY29uZmlnLnNlY3JldHMuc2Vzc2lvbixcbiAgICAgICAgICAgIHsgZXhwaXJlc0luTWludXRlczogNjAgKiA1IH1cbiAgICAgICAgKTtcbiAgICAgICAgcmVzLnN0YXR1cygyMDEpLmpzb24oeyB0b2tlbjogdG9rZW4sIHVzZXI6IHVzZXIgfSk7XG4gICAgfSk7XG59O1xuXG4vKipcbiAqIEBhcGkge2dldH0gL3VzZXJzL21lIEdldCB0aGUgbG9nZ2VkIHVzZXJcbiAqIEBhcGlWZXJzaW9uIDAuMS4wXG4gKiBAYXBpTmFtZSBHZXRNZVxuICogQGFwaURlc2NyaXB0aW9uIFJldHVybiB0aGUgdXNlciBtYXRjaGluZyB0aGUgYXV0aGVudGljYXRlZCB1c2VyLlxuICogQGFwaUdyb3VwIFVzZXJcbiAqXG4gKi9cbmV4cG9ydHMuZ2V0TWUgPSBmdW5jdGlvbiAocmVxLCByZXMpIHtcbiAgICB2YXIgdXNlcklkID0gcmVxLnVzZXIuX2lkO1xuICAgIFVzZXIuZmluZE9uZSh7XG4gICAgICAgIF9pZDogdXNlcklkXG4gICAgfSwgJy1zYWx0IC1wYXNzd29yZEhhc2gnLCBmdW5jdGlvbiAoZXJyLCB1c2VyKSB7XG4gICAgICAgIGlmIChlcnIpIHsgcmV0dXJuIGhhbmRsZUVycm9yKHJlcywgZXJyKTsgfVxuICAgICAgICBpZiAoIXVzZXIpIHsgcmV0dXJuIHJlcy5qc29uKDQwMSk7IH1cbiAgICAgICAgcmVzLnN0YXR1cygyMDApLmpzb24odXNlcik7XG4gICAgfSk7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
