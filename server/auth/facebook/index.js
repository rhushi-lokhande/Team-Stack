/// <reference path="../../server.d.ts" />
'use strict';
var express = require('express'), passport = require('passport'), auth = require('../auth.service');
var router = express.Router();
function renderSuccessTemplate(token, user) {
    return [
        '<script type="text/javascript">',
        'var token = "', token, '",',
        '    user = ', JSON.stringify(user), ';',
        'window.opener.postMessage({',
        '  status: "success",',
        '  token: token,',
        '  user: user',
        '}, "*");',
        '</script>'
    ].join('');
}
function renderFailTemplate() {
    return [
        '<script type="text/javascript">',
        'window.opener.postMessage({',
        '  status: "fail"',
        '}, "*");',
        '</script>'
    ].join('');
}
router.get('/', passport.authenticate('facebook', { scope: 'email' }));
router.get('/callback', function (req, res, next) {
    passport.authenticate('facebook', function (err, user, info) {
        if (err || !user)
            return res.send(renderFailTemplate());
        req.logIn(user, function (err) {
            if (err)
                return res.send(renderFailTemplate());
            var token = auth.signToken(req.user._id);
            return res.send(renderSuccessTemplate(token, req.user));
        });
    })(req, res, next);
});
module.exports = router;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF1dGgvZmFjZWJvb2svaW5kZXgudHMiXSwibmFtZXMiOlsicmVuZGVyU3VjY2Vzc1RlbXBsYXRlIiwicmVuZGVyRmFpbFRlbXBsYXRlIl0sIm1hcHBpbmdzIjoiQUFBQSwwQ0FBMEM7QUFDMUMsWUFBWSxDQUFDO0FBRWIsSUFBSSxPQUFPLEdBQUksT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUM3QixRQUFRLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUM5QixJQUFJLEdBQU8sT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFFMUMsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBRTlCLCtCQUErQixLQUFLLEVBQUUsSUFBSTtJQUN0Q0EsTUFBTUEsQ0FBQ0E7UUFDSEEsaUNBQWlDQTtRQUNqQ0EsZUFBZUEsRUFBRUEsS0FBS0EsRUFBRUEsSUFBSUE7UUFDNUJBLGFBQWFBLEVBQUVBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLElBQUlBLENBQUNBLEVBQUVBLEdBQUdBO1FBQ3hDQSw2QkFBNkJBO1FBQzdCQSxzQkFBc0JBO1FBQ3RCQSxpQkFBaUJBO1FBQ2pCQSxjQUFjQTtRQUNkQSxVQUFVQTtRQUNWQSxXQUFXQTtLQUNkQSxDQUFDQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQTtBQUNmQSxDQUFDQTtBQUVEO0lBQ0lDLE1BQU1BLENBQUNBO1FBQ0hBLGlDQUFpQ0E7UUFDakNBLDZCQUE2QkE7UUFDN0JBLGtCQUFrQkE7UUFDbEJBLFVBQVVBO1FBQ1ZBLFdBQVdBO0tBQ2RBLENBQUNBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBO0FBQ2ZBLENBQUNBO0FBRUQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLFlBQVksQ0FBQyxVQUFVLEVBQUUsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBRXZFLE1BQU0sQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLFVBQVMsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJO0lBQzNDLFFBQVEsQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLFVBQVMsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJO1FBQ3RELEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztZQUNiLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUMsQ0FBQztRQUUxQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxVQUFTLEdBQUc7WUFDeEIsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDO2dCQUNKLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUMsQ0FBQztZQUUxQyxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDekMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQzVELENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUN2QixDQUFDLENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDIiwiZmlsZSI6ImF1dGgvZmFjZWJvb2svaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vc2VydmVyLmQudHNcIiAvPlxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZXhwcmVzcyAgPSByZXF1aXJlKCdleHByZXNzJyksXG4gICAgcGFzc3BvcnQgPSByZXF1aXJlKCdwYXNzcG9ydCcpLFxuICAgIGF1dGggICAgID0gcmVxdWlyZSgnLi4vYXV0aC5zZXJ2aWNlJyk7XG5cbnZhciByb3V0ZXIgPSBleHByZXNzLlJvdXRlcigpO1xuXG5mdW5jdGlvbiByZW5kZXJTdWNjZXNzVGVtcGxhdGUodG9rZW4sIHVzZXIpIHtcbiAgICByZXR1cm4gW1xuICAgICAgICAnPHNjcmlwdCB0eXBlPVwidGV4dC9qYXZhc2NyaXB0XCI+JyxcbiAgICAgICAgJ3ZhciB0b2tlbiA9IFwiJywgdG9rZW4sICdcIiwnLFxuICAgICAgICAnICAgIHVzZXIgPSAnLCBKU09OLnN0cmluZ2lmeSh1c2VyKSwgJzsnLFxuICAgICAgICAnd2luZG93Lm9wZW5lci5wb3N0TWVzc2FnZSh7JyxcbiAgICAgICAgJyAgc3RhdHVzOiBcInN1Y2Nlc3NcIiwnLFxuICAgICAgICAnICB0b2tlbjogdG9rZW4sJyxcbiAgICAgICAgJyAgdXNlcjogdXNlcicsXG4gICAgICAgICd9LCBcIipcIik7JyxcbiAgICAgICAgJzwvc2NyaXB0PidcbiAgICBdLmpvaW4oJycpO1xufVxuXG5mdW5jdGlvbiByZW5kZXJGYWlsVGVtcGxhdGUoKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgJzxzY3JpcHQgdHlwZT1cInRleHQvamF2YXNjcmlwdFwiPicsXG4gICAgICAgICd3aW5kb3cub3BlbmVyLnBvc3RNZXNzYWdlKHsnLFxuICAgICAgICAnICBzdGF0dXM6IFwiZmFpbFwiJyxcbiAgICAgICAgJ30sIFwiKlwiKTsnLFxuICAgICAgICAnPC9zY3JpcHQ+J1xuICAgIF0uam9pbignJyk7XG59XG5cbnJvdXRlci5nZXQoJy8nLCBwYXNzcG9ydC5hdXRoZW50aWNhdGUoJ2ZhY2Vib29rJywgeyBzY29wZTogJ2VtYWlsJyB9KSk7XG5cbnJvdXRlci5nZXQoJy9jYWxsYmFjaycsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gICAgcGFzc3BvcnQuYXV0aGVudGljYXRlKCdmYWNlYm9vaycsIGZ1bmN0aW9uKGVyciwgdXNlciwgaW5mbykge1xuICAgICAgICBpZiAoZXJyIHx8ICF1c2VyKVxuICAgICAgICAgICAgcmV0dXJuIHJlcy5zZW5kKHJlbmRlckZhaWxUZW1wbGF0ZSgpKTtcblxuICAgICAgICByZXEubG9nSW4odXNlciwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpZiAoZXJyKVxuICAgICAgICAgICAgICAgIHJldHVybiByZXMuc2VuZChyZW5kZXJGYWlsVGVtcGxhdGUoKSk7XG5cbiAgICAgICAgICAgIHZhciB0b2tlbiA9IGF1dGguc2lnblRva2VuKHJlcS51c2VyLl9pZCk7XG4gICAgICAgICAgICByZXR1cm4gcmVzLnNlbmQocmVuZGVyU3VjY2Vzc1RlbXBsYXRlKHRva2VuLCByZXEudXNlcikpO1xuICAgICAgICB9KTtcbiAgICB9KShyZXEsIHJlcywgbmV4dCk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSByb3V0ZXI7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
